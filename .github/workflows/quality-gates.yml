# .github/workflows/quality-gates.yml
name: Quality Gates & Guardrails

on:
  pull_request:
    branches: [ main ]
  push:
    branches: [ main ]

jobs:
  pre-commit-validation:
    name: Pre-commit Validation
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Run pre-commit checks
      run: node scripts/pre-commit-checks.js
      
    - name: Upload pre-commit report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: pre-commit-report
        path: pre-commit-report.json

  build-validation:
    name: Build Validation
    runs-on: ubuntu-latest
    needs: pre-commit-validation
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Build all brands
      run: npm run build:all
      
    - name: Run postbuild script
      run: npm run build:root
      
    - name: Validate build output
      run: node scripts/validate-build.js
      
    - name: Upload build validation report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: build-validation-report
        path: build-validation-report.json
        
    - name: Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-output
        path: dist/

  deployment-safety:
    name: Deployment Safety Checks
    runs-on: ubuntu-latest
    needs: build-validation
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-output
        path: dist/
        
    - name: Run deployment safety checks
      run: node scripts/deployment-safety.js
      
    - name: Upload deployment safety report
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: deployment-safety-report
        path: deployment-safety-report.json

  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Run npm audit
      run: npm audit --audit-level=moderate
      continue-on-error: true
      
    - name: Check for sensitive files
      run: |
        # Check for common sensitive files
        if find . -name "*.env*" -not -path "./node_modules/*" | grep -q .; then
          echo "❌ Environment files found in repository"
          exit 1
        fi
        
        if find . -name "*.key" -not -path "./node_modules/*" | grep -q .; then
          echo "❌ Key files found in repository"
          exit 1
        fi
        
        echo "✅ No sensitive files detected"

  accessibility-check:
    name: Accessibility Check
    runs-on: ubuntu-latest
    needs: build-validation
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18'
        cache: 'npm'
        
    - name: Install dependencies
      run: npm ci
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-output
        path: dist/
        
    - name: Install accessibility tools
      run: npm install -g @axe-core/cli
      
    - name: Serve build locally
      run: |
        npx http-server dist -p 8080 &
        sleep 5
      
    - name: Run accessibility tests
      run: |
        # Test key pages for accessibility
        axe http://localhost:8080/lifetime/ --exit || echo "Accessibility issues found in Lifetime homepage"
        axe http://localhost:8080/cc/ --exit || echo "Accessibility issues found in CC homepage"
        axe http://localhost:8080/aih/ --exit || echo "Accessibility issues found in AIH homepage"

  performance-check:
    name: Performance Check
    runs-on: ubuntu-latest
    needs: build-validation
    
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Download build artifacts
      uses: actions/download-artifact@v4
      with:
        name: build-output
        path: dist/
        
    - name: Check build size
      run: |
        TOTAL_SIZE=$(du -sb dist/ | cut -f1)
        SIZE_MB=$((TOTAL_SIZE / 1024 / 1024))
        
        echo "Build size: ${SIZE_MB}MB"
        
        if [ $SIZE_MB -gt 100 ]; then
          echo "⚠️ Build size is large (${SIZE_MB}MB)"
        else
          echo "✅ Build size is acceptable (${SIZE_MB}MB)"
        fi
        
    - name: Check for large files
      run: |
        echo "Files larger than 1MB:"
        find dist/ -type f -size +1M -exec ls -lh {} \; || echo "No large files found"

  quality-gate-summary:
    name: Quality Gate Summary
    runs-on: ubuntu-latest
    needs: [pre-commit-validation, build-validation, security-scan, accessibility-check, performance-check]
    if: always()
    
    steps:
    - name: Check all jobs status
      run: |
        echo "Quality Gate Results:"
        echo "Pre-commit Validation: ${{ needs.pre-commit-validation.result }}"
        echo "Build Validation: ${{ needs.build-validation.result }}"
        echo "Security Scan: ${{ needs.security-scan.result }}"
        echo "Accessibility Check: ${{ needs.accessibility-check.result }}"
        echo "Performance Check: ${{ needs.performance-check.result }}"
        
        if [[ "${{ needs.pre-commit-validation.result }}" == "success" && 
              "${{ needs.build-validation.result }}" == "success" && 
              "${{ needs.security-scan.result }}" == "success" ]]; then
          echo "✅ All critical quality gates passed!"
        else
          echo "❌ Some quality gates failed!"
          exit 1
        fi

